@page "/productprocessor"
@using KodtestCodeunit.Services
@using KodtestCodeunit.Models
@inject ApiService ApiService

<PageTitle>Product Processor</PageTitle>

<h1>Product Processor</h1>

<div class="row mb-3">
    <div class="col">
        <button class="action-btn me-2" @onclick="GetDataAsync" disabled="@isGettingData">
            @if (isGettingData)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            Get Data
        </button>
        <button class="action-btn" @onclick="PostDataAsync" disabled="@(getDataResponse == null || isPostingData)">
            @if (isPostingData)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            Send Data
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (getDataResponse != null)
{
    <div class="card mb-3">
        <div class="card-header">
            <h5>Retrieved Data - Reference ID: @getDataResponse.ReferenceId</h5>
        </div>
        <div class="card-body">
            <p><strong>Number of products:</strong> @getDataResponse.Products.Count</p>

            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                <table class="table table-striped table-hover table-sm">
                    <thead class="table-dark sticky-top">
                        <tr>
                            <th scope="col">Code</th>
                            <th scope="col">Description</th>
                            <th scope="col">Weight</th>
                            <th scope="col">Color</th>
                            <th scope="col">Size</th>
                            <th scope="col">Price</th>
                            <th scope="col">Cost</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in getDataResponse.Products)
                        {
                            <tr>
                                <td><code>@product.Code</code></td>
                                <td>@product.Description</td>
                                <td>@product.Weight kg</td>
                                <td><span class="badge bg-secondary">@product.Color</span> (@product.ColorId)</td>
                                <td><span class="badge bg-info">@product.Size</span></td>
                                <td class="text-success fw-bold">@product.UnitPrice.ToString("C")</td>
                                <td class="text-muted">@product.UnitCost.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(postResult))
{
    <div class="card">
        <div class="card-header">
            <h5>POST Result</h5>
        </div>
        <div class="card-body">
            <div class="alert alert-success">
                <pre>@postResult</pre>
            </div>
        </div>
    </div>
}

@code
{
    private GetDataResponse? getDataResponse;
    private string? postResult;
    private bool isGettingData = false;
    private bool isPostingData = false;
    private string? errorMessage;

    private async Task GetDataAsync()
    {
        try
        {
            isGettingData = true;
            errorMessage = null;
            getDataResponse = await ApiService.GetDataAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error retrieving data: {ex.Message}";
        }
        finally
        {
            isGettingData = false;
        }
    }

    private async Task PostDataAsync()
    {
        if (getDataResponse == null) return;

        try
        {
            isPostingData = true;
            errorMessage = null;
            postResult = await ApiService.PostDataAsync(getDataResponse);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error sending data: {ex.Message}";
        }
        finally
        {
            isPostingData = false;
        }
    }
}